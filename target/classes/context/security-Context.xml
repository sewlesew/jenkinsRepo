<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<!-- enable Method level [vs URL level] authorization  This work for ROOT WEB APPLICATION Level scanned components
      Does NOT recognize WEB Application level components - for THAT  need to place enable line in Dispatcher-servlet-->
	<security:global-method-security pre-post-annotations="enabled"/>	
 
 
	<security:http use-expressions="true">

 	<!-- BASIC login -->
 <!-- 	 		<security:form-login />  
  -->	
 	
 		<!-- Implemented with Web based URL - basically Controller "METHOD" level authorization -->
	<!-- the more specific rules need to come first, followed by the more general ones. -->
	  <security:intercept-url pattern="/members/add" access="hasRole('ROLE_ADMIN')"/>  	
 	
		<!-- always-use-default-target overrides where login was triggered routes to default-target-url -->
		<!-- logout-url renames j_security_logout URL -->
		<!-- similarly username,password,login-processing  renames j_security_* stuff -->
		<!-- e.g., /j_spring_security_check is default for login-processing-url-->
  		<security:form-login 
 		 login-page="/login"
				login-processing-url="/postLogin"
				username-parameter="username" 
				password-parameter="password"
 			    default-target-url="/welcome"    
               always-use-default-target="true"   
               authentication-failure-url="/loginfailed"/>
 <!--  -->
         <security:logout logout-success-url="/logout" 
          delete-cookies="JSESSIONID" logout-url= "/doLogout"/>
         
		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout 
					logout-url= "/doLogout" REPLACES it 
		NOTE: is it JUST a URL naming convention - no mapping occurs
		-->
		<security:csrf disabled="true"/>
 	</security:http>
	
 <!-- Database security "custom queries are because we have used our own schema...
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider >
	<seurity
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from credentials where username=?"
				authorities-by-username-query="select u1.username, u2.authority from credentials u1, authority u2 where u1.username = u2.username and u1.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>
	
	-->
	
	
	<!-- Database security -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider  user-service-ref="userDetailsServiceImpl">
			 
			  <security:password-encoder hash="bcrypt" />  
			  
			  
		</security:authentication-provider>
	</security:authentication-manager>
	   

<bean id="userDetailsServiceImpl" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
    <property name="enableGroups" value="true" />
    <property name="enableAuthorities" value="false" />
    <property name="dataSource" ref="dataSource" />
   <property name="usersByUsernameQuery" value="select username,password,enabled from credentials where username=?" />
   <property name="groupAuthoritiesByUsernameQuery" value="select g.id, g.group_name, a.authority
                                from groups g, credentials_groups gc, groups_authority ga, authority a
                                where gc.CREDENTIALS_username = ? and g.id = ga.Groups_id and g.id = gc.Groups_id
                                and ga.authority_id = a.id" />
    
</bean> 
	


 </beans>
